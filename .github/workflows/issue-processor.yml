name: Issue Processor

on:
  issues:
    types: [opened, edited]

jobs:
  process-stock-command:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'discord-command')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Extract command from issue
      id: extract-command
      run: |
        python -c "
        import re
        import json
        
        issue_title = '''${{ github.event.issue.title }}'''
        issue_body = '''${{ github.event.issue.body }}'''
        
        # Extract command details from issue
        if 'Add Stock:' in issue_title:
            match = re.search(r'Add Stock: ([A-Z0-9\.\^]+) \((.+?)\)', issue_title)
            if match:
                symbol = match.group(1)
                name = match.group(2)
                market_match = re.search(r'\*\*市場\*\*: (.+)', issue_body)
                market = market_match.group(1) if market_match else 'us'
                
                print(f'ACTION=add')
                print(f'SYMBOL={symbol}')
                print(f'NAME={name}')
                print(f'MARKET={market}')
        elif 'Remove Stock:' in issue_title:
            match = re.search(r'Remove Stock: ([A-Z0-9\.\^]+)', issue_title)
            if match:
                symbol = match.group(1)
                
                print(f'ACTION=remove')
                print(f'SYMBOL={symbol}')
                print(f'NAME=')
                print(f'MARKET=')
        elif 'List Current Stocks' in issue_title:
            print(f'ACTION=list')
            print(f'SYMBOL=')
            print(f'NAME=')
            print(f'MARKET=')
        elif 'Clear All Stocks' in issue_title:
            print(f'ACTION=clear')
            print(f'SYMBOL=')
            print(f'NAME=')
            print(f'MARKET=')
        else:
            print(f'ACTION=unknown')
        " >> $GITHUB_OUTPUT
    
    - name: Process add stock command
      if: steps.extract-command.outputs.ACTION == 'add'
      run: |
        python -c "
        from utils.stock_manager import StockManager
        
        # Create stock manager
        stock_manager = StockManager()
        
        # Create new stock entry
        symbol = '${{ steps.extract-command.outputs.SYMBOL }}'
        name = '${{ steps.extract-command.outputs.NAME }}'
        market = '${{ steps.extract-command.outputs.MARKET }}'
        
        # Try to add stock
        success = stock_manager.add_stock(symbol, name, market)
        
        if success:
            print(f'SUCCESS=true')
            print(f'MESSAGE=株式 {symbol} ({name}) を監視リストに追加しました')
        else:
            print(f'SUCCESS=false')
            print(f'MESSAGE=株式 {symbol} は既に監視リストに存在します')
        " > /tmp/result.txt
        
        # Read the result
        cat /tmp/result.txt >> $GITHUB_OUTPUT
    
    - name: Process remove stock command
      if: steps.extract-command.outputs.ACTION == 'remove'
      run: |
        python -c "
        from utils.stock_manager import StockManager
        
        # Create stock manager
        stock_manager = StockManager()
        
        symbol = '${{ steps.extract-command.outputs.SYMBOL }}'
        
        # Try to remove stock
        success = stock_manager.remove_stock(symbol)
        
        if success:
            print(f'SUCCESS=true')
            print(f'MESSAGE=株式 {symbol} を監視リストから削除しました')
        else:
            print(f'SUCCESS=false')
            print(f'MESSAGE=株式 {symbol} は監視リストに存在しません')
        " > /tmp/result.txt
        
        cat /tmp/result.txt >> $GITHUB_OUTPUT
    
    - name: Process list stocks command
      if: steps.extract-command.outputs.ACTION == 'list'
      run: |
        python -c "
        from utils.stock_manager import StockManager
        
        # Create stock manager
        stock_manager = StockManager()
        
        # Get stocks by market
        jp_stocks = stock_manager.get_stocks_by_market('jp')
        us_stocks = stock_manager.get_stocks_by_market('us')
        crypto_stocks = stock_manager.get_stocks_by_market('crypto')
        
        message = '**現在の監視銘柄一覧**\n\n'
        
        if jp_stocks:
            message += '🇯🇵 **日本株:**\n'
            for stock in jp_stocks:
                message += f'- {stock.symbol}: {stock.name}\n'
            message += '\n'
        
        if us_stocks:
            message += '🇺🇸 **米国株:**\n'
            for stock in us_stocks:
                message += f'- {stock.symbol}: {stock.name}\n'
            message += '\n'
        
        if crypto_stocks:
            message += '₿ **暗号通貨:**\n'
            for stock in crypto_stocks:
                message += f'- {stock.symbol}: {stock.name}\n'
            message += '\n'
        
        if not (jp_stocks or us_stocks or crypto_stocks):
            message += '監視銘柄が設定されていません。'
        
        print(f'SUCCESS=true')
        print(f'MESSAGE={message}')
        " > /tmp/result.txt
        
        cat /tmp/result.txt >> $GITHUB_OUTPUT
    
    - name: Process clear stocks command
      if: steps.extract-command.outputs.ACTION == 'clear'
      run: |
        python -c "
        from utils.stock_manager import StockManager
        
        # Create stock manager
        stock_manager = StockManager()
        
        # Clear all stocks
        count = stock_manager.clear_stocks()
        
        print(f'SUCCESS=true')
        print(f'MESSAGE=全ての監視銘柄({count}件)を削除しました')
        " > /tmp/result.txt
        
        cat /tmp/result.txt >> $GITHUB_OUTPUT
    
    - name: Send Discord notification
      if: steps.extract-command.outputs.ACTION != 'unknown'
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          python -c "
          import requests
          import json
          import os
          
          webhook_url = '${{ secrets.DISCORD_WEBHOOK_URL }}'
          action = '${{ steps.extract-command.outputs.ACTION }}'
          success = os.getenv('SUCCESS', 'false')
          message = os.getenv('MESSAGE', '処理が完了しました')
          
          if success == 'true':
              color = 0x00FF00
              title = '✅ 処理完了'
          else:
              color = 0xFF0000
              title = '❌ 処理失敗'
          
          embed = {
              'title': title,
              'description': message,
              'color': color,
              'fields': [
                  {
                      'name': '実行コマンド',
                      'value': f'\`{action}\`',
                      'inline': True
                  }
              ]
          }
          
          payload = {'embeds': [embed]}
          response = requests.post(webhook_url, json=payload)
          "
        fi
    
    - name: Close issue
      if: steps.extract-command.outputs.ACTION != 'unknown'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            state: 'closed'
          });
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: '✅ コマンドが正常に処理されました。Discord通知を確認してください。'
          });