name: Discord Command Handler

on:
  workflow_dispatch:
    inputs:
      discord_message:
        description: 'Discord message content'
        required: true
        type: string
      discord_username:
        description: 'Discord username'
        required: false
        type: string
        default: 'Unknown'

jobs:
  process-discord-command:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Parse Discord command
      id: parse-command
      run: |
        python -c "
        import json
        from utils.discord_commands import DiscordCommandParser
        
        parser = DiscordCommandParser()
        message = '${{ github.event.inputs.discord_message }}'
        username = '${{ github.event.inputs.discord_username }}'
        
        command = parser.parse_command(message, username)
        
        if command:
            issue_data = parser.format_github_issue(command)
            print(f'COMMAND_FOUND=true')
            print(f'ISSUE_TITLE={issue_data[\"title\"]}')
            print(f'ISSUE_BODY<<EOF')
            print(issue_data['body'])
            print(f'EOF')
            print(f'ISSUE_LABELS={\"|\".join(issue_data[\"labels\"])}')
            print(f'COMMAND_ACTION={command.action}')
        else:
            print('COMMAND_FOUND=false')
        " >> $GITHUB_OUTPUT
    
    - name: Create GitHub Issue
      if: steps.parse-command.outputs.COMMAND_FOUND == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `${{ steps.parse-command.outputs.ISSUE_TITLE }}`;
          const body = `${{ steps.parse-command.outputs.ISSUE_BODY }}`;
          const labels = `${{ steps.parse-command.outputs.ISSUE_LABELS }}`.split('|');
          
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: labels
          });
          
          console.log(`Issue created: ${issue.data.html_url}`);
    
    - name: Send Discord notification for invalid command
      if: steps.parse-command.outputs.COMMAND_FOUND == 'false'
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          python -c "
          import requests
          import json
          
          webhook_url = '${{ secrets.DISCORD_WEBHOOK_URL }}'
          message = '${{ github.event.inputs.discord_message }}'
          
          embed = {
              'title': '❌ 無効なコマンド',
              'description': f'コマンドが認識できませんでした: \`{message}\`',
              'color': 0xFF0000,
              'fields': [
                  {
                      'name': '有効なコマンド',
                      'value': '''
                      \`!add-stock AAPL Apple us\` - 株式を追加
                      \`!remove-stock AAPL\` - 株式を削除  
                      \`!list-stocks\` - 監視銘柄リスト表示
                      \`!clear-stocks\` - 全銘柄削除
                      ''',
                      'inline': False
                  }
              ]
          }
          
          payload = {'embeds': [embed]}
          response = requests.post(webhook_url, json=payload)
          "
        fi
    
    - name: Send Discord notification for successful command
      if: steps.parse-command.outputs.COMMAND_FOUND == 'true'
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          python -c "
          import requests
          import json
          
          webhook_url = '${{ secrets.DISCORD_WEBHOOK_URL }}'
          action = '${{ steps.parse-command.outputs.COMMAND_ACTION }}'
          
          embed = {
              'title': '✅ コマンドを受付ました',
              'description': f'コマンドを処理中です: \`{action}\`',
              'color': 0x00FF00,
              'fields': [
                  {
                      'name': '処理状況',
                      'value': 'GitHub Issueを作成しました。処理完了まで少々お待ちください。',
                      'inline': False
                  }
              ]
          }
          
          payload = {'embeds': [embed]}
          response = requests.post(webhook_url, json=payload)
          "
        fi